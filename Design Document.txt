---------------------
Design Document v.1.0
---------------------

----------------------------------------------------------------------------------------------------------------------

DEVELOPER COMPONENTS

   MEAN Stack
      MongoDB 
         - Database configuration
      ExpressJS
         - Routing of backend/database components
      AngularJS
         - Front end javascript code
      NodeJS
         - For NPM components
   HTML
      - Code used for front end pages
   Bootstrap
      - Format/Style for front end design
   CSS
      - Format/Style for front end design

----------------------------------------------------------------------------------------------------------------------

DEVELOPMENT TOOLS

   IDE
      - Webstorm
      
   TESTING
      - Advanced Rest Client (Google Chrome App) 
         = Used for HTTP Request tests to server/database

----------------------------------------------------------------------------------------------------------------------

FUNCTIONAL COMPONENTS

   HTML Files
      - index.html
         = The main page the user will access
         = Gets the specified partials of the other pages for the website (persistent webpage)
      - main.html
         = Contains the Recent Feed
         = The default webpage
      - login.html
         = ***ONLY IF AUTHENTICATION IS IMPLEMENTED
         = The page that the user will use to login
         = The default webpage if authentication is implemented
   ExpressJS Files 
      - Routing of backend
   Database
      - Detailed information below in DATABASE section
   Host Server 
      - DigitalOcean or Rowan University (Possibly)
   Important Code
      - Notification System
         = Sends an e-mail to the specified user to notify them of a possible trade/sell from another user
   
----------------------------------------------------------------------------------------------------------------------
   
DATABASE

   MongoDB (NoSQL)
      - Will utilize 2 Schemas:
         = Book (Title, Author, ISBN, Department, Class)
         = Post (E-mail, Type, Book, Date)
      - Schemas will be implemented using Mongoose (http://mongoosejs.com/docs/guide.html)

----------------------------------------------------------------------------------------------------------------------
   
SERVER PLATFORM

   Node.js
      - Server scripts will be used for the following:
         = Using RESTful APIs 
         = Observing for complementary trade posts
         = Using email to notify posters of interested persons
            ~ Links provided in emails will update/delete posts 

----------------------------------------------------------------------------------------------------------------------
ROUTES(In Progress)

      GET      '/'                         returns main.html
      GET      '/api/posts/dept            returns postsController.listDept
      GET      '/api/posts/dept/class      returns postsController.listClass
      POST     '/api/post/sale/'           returns postsController.createSale
      POST     '/api/post/trade/'          returns postsController.createTrade
CONSIDERATIONS

   - User Accounts/Authorization/Authentication
   - SMS Service for notifications
   
----------------------------------------------------------------------------------------------------------------------
   
DRAFT UI:

   Source
      - https://github.com/joshjd17/SeniorProject/tree/master/Template%20Images
   Flow Diagram
      - https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Flow%20Diagram.png
      
      
   Index.html (Default Page)
      - The default web page that initializes the persistent components of the website
      - IF AUTHENTATION IS IMPLEMENTED: viewed after login.html
      - https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Main%20-%20Recent%20Feed.png
      
   Login.html
      - ***ONLY IF AUTHENTICATION IS IMPLEMENTED
      - Used for 'username' and 'password' authentication
      - https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Login.png
      
   Browse Partial
      - Default Page
         = Viewed when the 'Browse' button is clicked on
         = Fields/Required User Inputs
            ~ Department: The department in which the user wants to search through
            ~ Class: The class in which the user wants to search through
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Browse%20-%20Intro.png
      - Browsing Page
         = When valid input for 'department' and 'class' fields are given
         = Lists the 'Trade' and 'Sell' posts that match the provided 'department' and 'class' fields
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Browse%20-%20Main.png
      - Browsing Sell Post
         = Viewed when a specified 'Sell' post is clicked on
         = Display
            ~ Type: Selling
            ~ Title: Name of the book being sold
            ~ Author: Name of the author of the book being sold
            ~ ISBN: ISBN of the book being sold
            ~ Condition: Condition of the book being sold (New, Good, Fair, etc.)
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Browse%20-%20View%20Sell%20Post.png
      - Browsing Trade Post
         = Viewed when a specified 'Trade' post is clicked on
         = Display
            ~ Type: Trading
            ~ Title: Name of the book being traded
            ~ Author: Name of the author of the book being traded
            ~ ISBN: ISBN of the book being traded
            ~ Condition: Condition of the book being sold (New, Good, Fair, etc.)
            ~ Trading_For_Title: The title of the book the user wishes to trade their book for
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Browse%20-%20View%20Trade%20Post.png
         
   Post Partial
      - A javascript popup that is viewable when the user clicks on the 'Post' button (viewed on top of the current page)
      - Sell Post
         = Default page, viewed when the user clicks on the 'Post' button
         = Viewed when the user changes the field 'Trade' to 'Sell'
         = Fields/Required User Inputs
            ~ Type: Sell
            ~ Price: Amount the user wants to sell the book for
            ~ Department: Name of the department the book to be sold is in
            ~ Class: Name of the class the book to be sold is in
            ~ Title: Name of the book the user wants to sell
            ~ Author: Name of the author for the book the user wants to sell
            ~ ISBN: ISBN for the book the user wants to sell
            ~ Condition: The condition of the book the user wants to sell (New, Good, Fair, etc.)
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Post%20-%20Sell.png
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Post%20-%20Sell%20Scrolled.png
      - Trade Post
         = Viewed when the user changes the field 'Sell' to 'Trade'
         = Fields/Required User Inputs
            ~ Type: Trade
            ~ Trade_Title: Name of the book the user wants
            ~ Department: Name of the department the book to be traded is in
            ~ Class: Name of the class the book to be traded is in
            ~ Title: Name of the book the user wants to trade
            ~ Author: Name of the author for the book the user wants to trade
            ~ ISBN: ISBN for the book the user wants to trade
            ~ Condition: The condition of the book the user wants to trade (New, Good, Fair, etc.)
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Post%20-%20Trade.png
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Post%20-%20Trade%20Scrolled.png

----------------------------------------------------------------------------------------------------------------------

PROTOTYPE:
   - Contains functional code for front-end, back-end and database
   - Connects locally using 'npm start' in the root folder
      = In a web browser, type in localhost:3000 to connect to the website
   - Runs mongod.exe in the command line to initialize the server
      = The server holds user information and posts generated by the user
   - Functionality
      = Allows for the user signup and login into the website
      = Allows for the user to post text into the website, similar to a forum
      = The user's username and password are stored into the database under 'users'
      = All of the posts are stored into the database under 'posts'
   - https://github.com/joshjd17/SeniorProject/tree/prototype-bb/PrototypeBB
   
----------------------------------------------------------------------------------------------------------------------

REFERENCES:

   Chirp Tutorial:
      // Handles posts, login/authentication, database configuration
      https://github.com/microsoftlearning/chirp
      https://www.youtube.com/watch?v=Jh0er2pRcq8
        
   NorthwindNode Tutorial:
      // Handles posts, categories, login/authentication, database configuration, search
      // Similar structure to design
      http://www.bradoncode.com/tutorials/learn-mean-stack-tutorial/
        
   Michael Moser, MEAN Stack Intro:Build An End to End Application:
      //Breakdown of MEAN stack functionality and components
      https://www.youtube.com/watch?v=AEE7DY2AYvI

-----------------------
 Design Document v.1.0
-----------------------

SUMMARY

   This website will allow Rowan students to buy, sell and trade their used textbooks to other students. 
   
   It will have a "single page application" design in which the user will navigate the website without having to load an    
   entire webpage when they click on a link or button within the website. 
   
   The 'index.html' file that contains the buttons and navigation will persist, while the body of the webpages will be 
   populated with the code within the partials. The partials include html files such as 'browse.html', 'post.html', 
   'about.html', 'contact.html', etc. that contain only the functional code within their respective uses.
   
   There will also be a notification system that allows for users to send an e-mail or notification to the seller or
   trader in order to contact them to discuss about a possible deal.
   
   The website will be designed to be 'mobile friendly', which means that it will display its contents in an easily
   readable and viewable manner on mobile devices.

----------------------------------------------------------------------------------------------------------------------

DEVELOPER COMPONENTS

   MEAN Stack
      MongoDB 
         - Database configuration
      ExpressJS
         - Routing of back-end/database components
      AngularJS
         - Front-end javascript code
      NodeJS
         - For NPM components
   HTML
      - Code used for front-end webpages
   Bootstrap
      - Format/Style for front-end design
   CSS
      - Format/Style for front-end design

----------------------------------------------------------------------------------------------------------------------

DEVELOPMENT TOOLS

   IDE
      - Sublime Text 2
      
   TESTING
      - Advanced Rest Client (Google Chrome App) 
         = Used for HTTP Request tests to server/database
         = Functionality
            ~ Allows for testing on registering and logging in of a user (ONLY IF AUTHENTICATION IS IMPLEMENTED)
            ~ Allows for testing on post creation and deletion
            ~ Tests made on the Advanced Rest Client will manipulate the database as well

----------------------------------------------------------------------------------------------------------------------

FUNCTIONAL COMPONENTS

   HTML Files
      - index.html
         = The main page the user will access
         = Gets the specified partials of the other pages for the website (persistent webpage)
      - main.html
         = Contains the Recent Feed
         = The default webpage/partial
      - browse.html
         = The partial that contains code for the 'Browse' components
      - post.html
         = The partial that contains code for the 'Post' components
      - about.html
         = The partial that contains code for the 'About' component
      - contact.html
         = The partial that contains code for the 'Contact' component
   ExpressJS Files 
      - server.js
         = Contains routing and server functions
   Database
      - Detailed information below in DATABASE section
   Host Server 
      - DigitalOcean
   Important Code
      - Notification System
         = Sends an e-mail to the specified user to notify them of a possible trade/sell from another user
         = The user clicks a button at the bottom of a post to contact the seller/trader
   
----------------------------------------------------------------------------------------------------------------------
   
DATABASE

   MongoDB (NoSQL)
      - One collection using two JSON designs
         = Post (Book (Title, Author, ISBN, Department, Class),User(Name, E-mail), Type)
      - Schemas will be implemented using MongoJS 

----------------------------------------------------------------------------------------------------------------------
   
SERVER PLATFORM

   Node.js
      - Server scripts will be used for the following:
         = Using RESTful APIs 
         = Observing for complementary trade posts
         = Using email to notify posters of interested persons
            ~ Links provided in e-mails will update/delete posts 

----------------------------------------------------------------------------------------------------------------------

ROUTES (In Progress)

      GET      '/'                         returns main.html
      GET      '/deptList'                 returns distinct(department)
      GET      '/classList'                returns distinct(class,department:deptSelect)
      POST     '/post'                     inserts post
     

----------------------------------------------------------------------------------------------------------------------

CONSIDERATIONS

   - User Accounts/Authorization/Authentication
   - SMS Service for notifications
   - Improving post removal 
   - Improving seller notifications through automated emails
   
----------------------------------------------------------------------------------------------------------------------
   
DESIGN/UI:

   Source
      - https://github.com/joshjd17/SeniorProject/tree/master/Template%20Images
   Flow Diagram
      - https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Flow%20Diagram.png
      
      
   Index.html (Default Page)
      - The default web page that initializes the persistent components of the website
      - IF AUTHENTATION IS IMPLEMENTED: viewed after login.html
      - https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Main%20-%20Recent%20Feed.png
      
   Login.html
      - (ONLY IF AUTHENTICATION IS IMPLEMENTED)
      - Used for 'username' and 'password' authentication
      - https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Login.png
      
   Browse Partial
      - Default Page
         = Viewed when the 'Browse' button is clicked on
         = Fields/Required User Inputs
            ~ Department: The department in which the user wants to search through
            ~ Class: The class in which the user wants to search through
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Browse%20-%20Intro.png
         
      - Browsing Page
         = When valid input for 'department' and 'class' fields are given
         = Lists the 'Trade' and 'Sell' posts that match the provided 'department' and 'class' fields
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Browse%20-%20Main.png
         
      - Browsing Sell Post
         = Viewed when a specified 'Sell' post is clicked on
         = The user will click on a button that will notify/contact the original poster for a potential deal
         = Display
            ~ Type: Selling
            ~ Title: Name of the book being sold
            ~ Author: Name of the author of the book being sold
            ~ ISBN: ISBN of the book being sold
            ~ Condition: Condition of the book being sold (New, Good, Fair, etc.)
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Browse%20-%20View%20Sell%20Post.png
         
      - Browsing Trade Post
         = Viewed when a specified 'Trade' post is clicked on
         = The user will click on a button that will notify/contact the original poster for a potential deal
         = Display
            ~ Type: Trading
            ~ Title: Name of the book being traded
            ~ Author: Name of the author of the book being traded
            ~ ISBN: ISBN of the book being traded
            ~ Condition: Condition of the book being sold (New, Good, Fair, etc.)
            ~ Trading_For_Title: The title of the book the user wishes to trade their book for
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Browse%20-%20View%20Trade%20Post.png
         
   Post Partial
      - A javascript popup that is viewable when the user clicks on the 'Post' button (viewed on top of the current page)
      - Sell Post
         = Default page, viewed when the user clicks on the 'Post' button
         = Viewed when the user changes the field 'Trade' to 'Sell'
         = Fields/Required User Inputs
            ~ Type: Sell
            ~ Price: Amount the user wants to sell the book for
            ~ Department: Name of the department the book to be sold is in
            ~ Class: Name of the class the book to be sold is in
            ~ Title: Name of the book the user wants to sell
            ~ Author: Name of the author for the book the user wants to sell
            ~ ISBN: ISBN for the book the user wants to sell
            ~ Condition: The condition of the book the user wants to sell (New, Good, Fair, etc.) ***
            ~ Contact Name: The name of the seller
            ~ Contact E-mail: The e-mail of the seller
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Post%20-%20Sell.png
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Post%20-%20Sell%20Scrolled.png
         
      - Trade Post
         = Viewed when the user changes the field 'Sell' to 'Trade'
         = Fields/Required User Inputs
            ~ Type: Trade
            ~ Trade_Title: Name of the book the user wants
            ~ Department: Name of the department the book to be traded is in
            ~ Class: Name of the class the book to be traded is in
            ~ Title: Name of the book the user wants to trade
            ~ Author: Name of the author for the book the user wants to trade
            ~ ISBN: ISBN for the book the user wants to trade
            ~ Condition: The condition of the book the user wants to trade (New, Good, Fair, etc.) ***
            ~ Contact Name: The name of the trader
            ~ Contact E-mail: The e-mail of the trader
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Post%20-%20Trade.png
         = https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Post%20-%20Trade%20Scrolled.png
   
   About Partial
      - Contains text that summarizes the website
      - https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/About.png
      
   Contact Partial
      - Contains text that provides developer/administrator contact information to the user
      - https://github.com/joshjd17/SeniorProject/blob/master/Template%20Images/Contact.png

----------------------------------------------------------------------------------------------------------------------

PROTOTYPE:
   - Contains functional code for front-end, back-end and database
   - Connects locally using 'npm start' in the root folder
      = In a web browser, type in localhost:3000 to connect to the website
   - Runs mongod.exe in the command line to initialize the server
      = The server holds user information and posts generated by the user
   - Functionality
      = Allows for the user signup and login into the website
      = Allows for the user to post text into the website, similar to a forum
      = The user's username and password are stored into the database under 'users'
      = All of the posts are stored into the database under 'posts'
      = TODO: Implement more navigation and more advanced schemas
   - https://github.com/joshjd17/SeniorProject/tree/prototype-bb/PrototypeBB
   
APPLICATION:   
   https://github.com/joshjd17/SeniorProject/tree/BookBodega
   
----------------------------------------------------------------------------------------------------------------------

REFERENCES:

   Chirp Tutorial:
      // Handles posts, login/authentication, database configuration
      https://github.com/microsoftlearning/chirp
      https://www.youtube.com/watch?v=Jh0er2pRcq8
        
   NorthwindNode Tutorial:
      // Handles posts, categories, login/authentication, database configuration, search
      // Similar structure to design
      http://www.bradoncode.com/tutorials/learn-mean-stack-tutorial/
        
   Michael Moser, MEAN Stack Intro:Build An End to End Application:
      //Breakdown of MEAN stack functionality and components
      https://www.youtube.com/watch?v=AEE7DY2AYvI
